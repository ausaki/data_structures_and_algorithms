# title: minimize-malware-spread
# detail: https://leetcode.com/submissions/detail/404326129/
# datetime: Sun Oct  4 17:40:27 2020
# runtime: 1652 ms
# memory: 16.8 MB

class DisjSet:
    def __init__(self, n ):
        self.disj_set = [-1] * n
        self.sizes = [1] * n
        
    def find(self, x):
        while self.disj_set[x] >= 0:
            x = self.disj_set[x]
        return x
    
    def union(self, x, y):
        i = self.find(x)
        j = self.find(y)
        if i == j:
            return
        if self.disj_set[i] < self.disj_set[j]:
            self.disj_set[j] = i
            self.sizes[i] += self.sizes[j]
            self.sizes[j] = 0
        else:
            if self.disj_set[i] == self.disj_set[j]:
                self.disj_set[j] -= 1
            self.disj_set[i] = j
            self.sizes[j] += self.sizes[i]
            self.sizes[i] = 0
    
    def ssize(self, i):
        return self.sizes[i]
    
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        dj = DisjSet(n)
        for i in range(n):
            for j in range(n):
                if graph[i][j]:
                    dj.union(i, j)
        s = collections.defaultdict(list)
        for i in initial:
            s[dj.find(i)].append(i)
        idx = -1
        size = 0
        for k, v in s.items():
            if len(v) == 1:
                sz = dj.ssize(k)
                if sz > size:
                    size = sz
                    idx = v[0]
                elif sz == size:
                    idx = min(idx, v[0])
        return idx if idx >= 0 else min(initial)
            
                